// master 分支
// 在远程仓库创立时会默认创建一个master分支,这个分支叫做主干;主干分支上保存的是线上运行的代码,这些代码都是经过测试,没有问题
// 的代码;

// 基于master的开发分支:
// 真实的项目中,我们一般不是直接在master分支上开发.而是基于master新开一个开发分支;每个分支都有自己的版本库,记录发生在当前
// 分支上的变更;

// 我们新开的分支,一般都是基于master开分支; 新开的分支相当于在开分支的那一刻的master的快照(master里面的代码什么样,分支里面
// 的代码就是什么样);接下来所有的开发都是在分支上完成的;

// 合并分支:
// 当开发完成后,要把分支合并到master;因为线上跑的都是master的代码,而我们在分支里面开发的代码,master里面是没有的;
// 但是在分支合并到master之前,我们需要先把master上的代码同步到分支上.然后再把分支合并到master;

// 创建一个本地分支:
// git checkout -b 分支名 [创建新分支并且切换到新分支]
// 或者 git branch 分支名 [新建分支,但是不会帮你切换到分支]

// git branch -v 查看当前所有的分支,前面带*表示当前所处的分支;

// 切换分支:
// git checkout 分支名 [从当前分支切换至某个分支]
// git checkout master 切换到master

// 删除分支:
// git branch -D 分支名

// 合并分支:
// git merge 分支名 [把指定的分支合并到当前分支]

// 分支开发流程:
// 1. 克隆远程仓库到本地: git clone 仓库地址
// 2. 在远程新建一个分支,例如feature_0715
// 3. 在本地仓库新建一个和远程分支同名的分支,git checkout -b feature_0715
// 4. 同步本地分支和远程分支: git pull origin feature_0715(分支名)
// 5. 在本地开发(在目录中新建/修改文件)
// 6. 适时的add commit, 并且要push到远程分支; git push origin feature_0715 (分支名) [如果多人协作开发,在push到远程分支之前,
// 先pull远程分支]
// 在pull分支时,可能会冲突,如果多人修改了同一个文件,就会冲突;冲突后就要解决冲突,谁发现冲突谁解决;所谓解决冲突,就是确定哪些
// 代码要,哪些不要; 解决冲突后,需要重新commit到历史区,然后再push到远程分支;
// 7. 重复第6步,直到功能开发完成;

// 分支提测(开发完成后把项目交给QA同事去测试):
// 1. 开发结束后我们都是用分支提测
// 2. 一般QA会要求咱们同步master的代码(合一下master提测),就是把master的代码合并到分支上;
// 2.1 本地分支切换到master
// 2.2 pull master ,使本地的master里面的代码和远程master同步
// 2.3 切换到开发分支 feature_0715
// 2.4 执行合并: git merge master --no-ff [把master合并到feature_0715]
// 2.5 合并master以后如果有冲突,需要解决冲突(解决冲突的方式和之前一样); 解决完冲突再commit然后push到远程分支;
// 2.6 接着就用开发分支提测(如果没有提测文档,需要把分支名发给QA同事)
// 2.7 在测试过程中发现bug,咱们就在原来的开发分支feature_0715上改,改后add, commit 然后push到远程分支上;

// (所有的push之前都要pull)


// 上线(发版):
// 1. 上线之前还需要再次同步master的代码到分支(再次把master的代码合并到分支);
// 2. 把分支合并到master;但是一般情况下,都是提交merge request(MR), github上叫做pull request
// 3. 找有权限合代码的人,帮你合并MR
// 4. 合完代码去找上线的人上线(一般都是运维的同事负责上线)

// 多人协作:
// 1. 如果是github,把成员添加到项目中 settings -> Collaborators -> 用github名, 然后再邀请,被邀请的人同意后才会加入到项目中;
/// 2. gitlab 你的老大会给开账号,并且把你加到项目中;

