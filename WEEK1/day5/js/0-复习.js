/*
* 1. 闭包：
*   函数执行时形成的私有作用域，私有作用域可以保护私有变量不受外界干扰，我们称这种机制为闭包；其中最为经典的闭包情形是不
* 销毁的栈内存，例如一个函数执行return一个函数；
*   1.2 闭包作用：
*       1. 函数柯里化（利用闭包不销毁的作用域保存值）：多参数函数变单参数函数。
*       2. 在没有模块化规范时，使用闭包隔离全局命名空间。
*       3. 惰性封装
*       3. 利用不销毁的作用域存值，累加计数和选项卡的闭包解决方案；
* 2. this: this是代码执行时的环境对象。一般在函数中使用，在函数执行时确定this的指向.根据函数执行方式不同，this指向也不相同：
*   2.1 事件函数中的this是绑定该事件的元素：
*   2.2 自执行函数中的this指向window；
*   2.3 定时器setTimeout/setInterval 回调函数中this指向window
*   2.4 全局作用域中的this指向window(在全局中用var和function声明的变量会给window增加同名属性)
*   2.5 方法调用（执行）时看执行时前面有没有 . ，如果有点，点前面是谁，方法中的this就是谁，如果没有点，方法中的this就指向window;
* (对象["方法名"]等价于 对象.方法名)
*   2.6 箭头函数中this指向箭头函数声明时所在作用域中的this;
*   2.7  this在js代码运行时不能通过给this赋值的方式修改；
* 3. i++/++i
*   i++: 先取i的当前值和其他值运算，再给自身累加；
*   ++i: 先给自身累加，然后取值和其他值运算；
* 4. 面向对象：是对现实世界的理解和抽象方式。它关注的重点是分类解决问题；
*    对象：万事万物且对象，每个对象都有自己的属性、特性和功能；
*    类： 抽象对象的属性、特性，把对象分类。类是一个描述一群事物的属性（特性、功能）的抽象概念。
*    实例：实例是拥有这个类的属性的一个具体个体。只要是这个类的个体，就会有这个类全部的属性。
*
*    数组类：有序的键值对集合，而且还有pop/push/slice..这样的属性
*    对象类：无序的键值对集合，没有pop/push..这些属性
*
*    面向对象研究的问题：封装、继承、多态
*      封装：
*        单例模式：把要描述的事物，把这个事物属性都放到一个对象中。对象的属性就是事物的属性，属性值就是对这个属性的具体描述。
* 对象就叫做单例，存储这个对象的变量名叫做命名空间（namespace）.
*        高级单例：不是给变量直接赋值一个对象，而是在自执行函数中返回一个对象。这样做的优势：可以选择哪些给外界使用，哪些不给外界使用；
*        工厂模式：
*        构造函数模式：
*        基于构造函数的原型模式：
*      封装就是为了创造对象。
*
* */
var num = 12;
var obj = {
    num: 15,
    getNum: function () {
        // 这个函数的作用域就是箭头函数声明时的作用域，箭头函数中的this就是此函数作用域中的this
        var num = 13;
        return () =>{
            // 箭头函数中的this是箭头函数声明时，所在作用域中的this
            console.log(this.num);
        }
    }
};
obj.getNum();

















