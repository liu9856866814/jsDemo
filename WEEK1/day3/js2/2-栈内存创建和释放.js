/*
* 目标：
*   1.理解栈内存的作用
*   2.理解栈内存的创建和释放
* */

// 栈内存（作用域）：供js代码执行的环境，存储基本数据类型的值；

// 创建栈内存：
/* 1.浏览器打开一个页面时，会首先形成一个顶层的栈内存，就是全局作用域window
*  2.函数执行时产生的私有作用域，就是一个供函数代码执行的栈内存
* */

// 仅仅创建一个函数不会形成一个新的栈内存
function sum(){
    var total = 0;
    total = a + b;
    return total;
}
sum(1,3); // 函数执行时，才会有栈内存
sum(1,4); // 函数每次执行都是互相独立的
// 函数执行过程：
/* 1. 新开一个栈内存
*  2. 形参赋值
*  3. 变量提升
*  4. 执行函数代码
*  5. 一般情况下，会释放栈内存
* */

function fe(){
    return {
        job:'FE'
    }
}
var o1 = fe();// fe() 除了让fe执行，还代表fe函数的返回值
var o2 = fe();
console.log(o1 === o2);//false o1和o2是两个堆内存地址
({}) ==={}; // false

// 栈内存销毁：
// 顶层栈（全局作用域）销毁：页面关闭，全局作用域销毁；
// 私有作用域销毁:一般情况下，函数执行结束后，栈内存销毁；注意：不销毁的情况；






